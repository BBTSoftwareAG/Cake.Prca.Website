---
Title: Reference
NoSidebar: true
---
<p>
    This reference guide describes the various methods and properties which you can use directly from inside a Cake build script.
    If you're looking for other kind of information, check out the <a href="/api">API reference</a> or the <a href="/docs">documentation</a>.
</p>

<p>
    These are <a href="http://cakebuild.net/docs/fundamentals/aliases" target="_blank">script aliases</a>, that offers specific functionality within the context of a Cake build script.
    A script alias is an extension method for <a href="http://cakebuild.net/api/Cake.Core/ICakeContext/" target="_blank">ICakeContext</a>.
</p>

@{
    // We should only have one alias here
    var aliasGroups =
        Documents["DslAliases"]
            .Single()
            .DocumentList(Keys.GroupDocuments)
            .SelectMany(x => x.DocumentList(CodeAnalysisKeys.Members))
            .Where(x => x.String("Kind") == "Method")
            .Select(x => new 
            {
                Doc = x,
                MethodAlias = x.DocumentList(CodeAnalysisKeys.Attributes).Any(attr => attr.String(CodeAnalysisKeys.Name) == "CakeMethodAliasAttribute"),
                PropertyAlias = x.DocumentList(CodeAnalysisKeys.Attributes).Any(attr => attr.String(CodeAnalysisKeys.Name) == "CakePropertyAliasAttribute")
            })
            .Where(x => x.MethodAlias || x.PropertyAlias)
            .GroupBy(x => x.Doc.DocumentList(CodeAnalysisKeys.Attributes)
                .Where(attr => attr.String(CodeAnalysisKeys.Name) == "CakeAliasCategoryAttribute")
                .Select(attr => attr.Get<Microsoft.CodeAnalysis.AttributeData>(CodeAnalysisKeys.AttributeData).ConstructorArguments.FirstOrDefault().Value)
                .FirstOrDefault() as string ?? string.Empty)
            .OrderBy(x => x.Key);
}

@foreach(var aliasGroup in aliasGroups)
{
    string groupName = string.IsNullOrEmpty(aliasGroup.Key) ? "General" : aliasGroup.Key;
    <h1 id="@(groupName.Replace(" ", "-"))">@groupName</h1>  
    <div class="box">
        <div class="box-body no-padding">
            <table class="table table-striped table-hover two-cols">
                @foreach(var alias in aliasGroup.OrderBy(x => x.Doc.String(CodeAnalysisKeys.DisplayName)))
                {
                    <tr>
                        <td>
                            @if(alias.MethodAlias)
                            {
                                <text>@Context.GetTypeLink(alias.Doc)</text>
                            }
                            else
                            {
                                <text>@Context.GetTypeLink(alias.Doc, alias.Doc.String("Name"))</text>
                            }
                        </td>
                        <td>
                            @Html.Raw(alias.Doc.String(CodeAnalysisKeys.Summary))
                            @{
                                IDocument assemblyDoc = alias.Doc.Document(CodeAnalysisKeys.ContainingAssembly);
                                if(assemblyDoc != null)
                                {
                                    <text>
                                        <br/>
                                        <small><i>Addin from @Context.GetTypeLink(assemblyDoc)</i></small>
                                    </text>
                                }
                            }
                        </td>
                    </tr>
                }
            </table>
        </div>
    </div>
}